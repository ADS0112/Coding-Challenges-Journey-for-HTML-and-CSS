/* Global reset with margin and padding set to 0. Since these can be overwritten very easily we can apply our own padding and margin to each element later. This removes the default padding that comes with the page */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* PAGE SECTIONS */
body {
  font-family: sans-serif;
  color: #444;
  border-top: 10px solid #255eb4;
  /* Position: relaiive here because we want the button to be positoned relatively to this element. not the viewport */
  position: relative;
}
nav a:link {
  margin-right: 30px;
}
/* Adds a width to the all the elements with a container, then uses margin left and right auto to center the items. The margin changes as the page shrinks and grows */
.container {
  width: 1200px;
  margin: 0 auto;
  /* Since the button is now in the container, that is the parent element. IT WILL ONLY POSITION ACCORDING THE FIRST RELATIVELY POSITOONED ELEMENT */
  /* position: relative; */
}
/* All other style elements inherit the properties of body until those specific elements styled */
nav {
  font-size: 18px;
}
.main-header {
  background-color: #f7f7f7;
  /* padding: 10px 40px; */
  margin-bottom: 60px;
  padding: 20px 40px;
  /* height: 80px; */
}

article {
  margin-bottom: 60px;
}

.article-header {
  margin-bottom: 40px;
}
.author-img {
  width: 50px;
  height: 50px;
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #255eb4;
  border-bottom: 5px solid #255eb4;
  padding: 50px 40px;
}
/* SMALLER ELEMENTS */
h1,
h2,
h3 {
  color: #255eb4;
}

h1 {
  font-size: 20px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
  margin-bottom: 30px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}
li {
  font-size: 20px;
  margin-bottom: 10px;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

h3 + p::first-line {
  /* color: red; */
} /* -- + SELECTS THE ADJASCENT SIBLING SELECTOR*/

/* BEFORE AND AFTER PSEUDO ELEMNTS */
h2 {
  position: relative;
}

h2::after {
  content: "TOP";
  background-color: lightcoral;
  font-size: 10px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  right: -25px top -10px;
  color: black;
}
/* Typcially bad pracitce to style elements in accordanace with HTML structure. If we chnage HTML, the styles will change, so use classes */

/* using ID selector - ID's cannot be repeated anyhwere else, only one id per element - dont use ID's, use classes*/
.author {
  font-style: italic;
}

.copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related-list {
  list-style: none;
  margin-left: 0;
}
a:link {
  color: #255eb4;
  text-decoration: none;
}
a:visited {
  color: #255eb4;
}

a:hover {
  color: lightcoral;
  text-decoration: underline;
}
a:active {
  background-color: lightgray;
}
/* Using % for width ensures that the size of the image stays the same as you expand or contract the page because it is always the size of the parent container This is useful for building responsive websites*/
.coding-img {
  width: 100%;
  height: auto;
}

/* Adding a pseudo-class. It will select all li elements that are the first child of its parent elements. So we dont have to add a class to each first element */
li:first-child {
  font-weight: bold;
}
li:last-child {
  font-style: italic;
  margin-bottom: 0;
}
/* Can use nth-child to select specific child. Can even use specific key words such as odd, it will seleect all odd elements*/
li:nth-child(2) {
  /* color: red; */
}

/* Inherited properites have the lowest priority */

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;
  /* element by default moves in relation to the visible part of the viewpokrt, which not what we want. We want to move it in relation to some other parent element. In this case we want this button to be relative to the page, in other words the body element.  */
  position: absolute;
  bottom: 50px;
  right: 50px;
}

/* FLOATS */
/* Image flots on the left of the cotnainer and breaks from document flow */
/* .author-img {
  float: left;
  margin-bottom: 20px;
  width: 50px;
  height: 50px;
} */
/* Without adding float to this, this still displays as a block and starts at the beginning of the container. To break it and have it start where the image floats, you have to float this element as well */
/* .author {
  margin-left: 20px;
  margin-top: 10px;
  float: left;
} */

/* h1 {
  float: left;
}
nav {
  float: right;
}
/* .clear { */
/* clear: both;
} */

/* clear fix hack */
/* .clearfix::after {
  clear: both;
  content: "";
  display: block;
} */

/* article {
  display: inline-block;
  width: 825px;
  float: left;
} */

/* aside {
  width: 300px;
  float: right;
}

footer {
  clear: both;
} */

/* FLEXBOX */
.main-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.author-box {
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 15px;
}
.author {
  margin-bottom: 0;
}

.related-post {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-bottom: 30px;
}
.related-author {
  margin-bottom: 0;
  font-size: 14px;
  font-weight: none;
  font-style: italic;
}
.related-link:link {
  font-size: 17px;
  font-weight: bold;
  font-style: normal;
  margin-bottom: 5px;
  display: block;
}
